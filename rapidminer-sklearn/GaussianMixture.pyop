{"type": "learner", "declaration": {"name": "Gaussian Mixture Model ", "dropSpecial": true, "capabilities": ["numerical attributes", "unlabeled"], "parameters": [{"name": "n_components", "type": "integer", "description": "The number of mixture components.", "value": 2, "optional": false}, {"name": "covariance_type", "type": "category", "description": "Describing the type of covariance parameters to use", "categories": ["full", "tied", "diag", "spherical"], "value": "full", "optional": false, "advanced": false}, {"name": "tol", "type": "real", "description": "The convergence threshold. EM iterations will stop when the lower bound average gain is below this threshold.", "value": 0.001, "optional": false}, {"name": "reg_covar", "type": "real", "description": "Non-negative regularization added to the diagonal of covariance. Allows to assure that the covariance matrices are all positive.", "value": 0.2, "optional": false}, {"name": "max_iter", "type": "integer", "description": "The number of EM iterations to perform.", "value": 100, "optional": false}, {"name": "n_init", "type": "integer", "description": "The number of initializations to perform. The best results are kept.", "value": 1, "optional": false}, {"name": "init_params", "type": "category", "description": "The method used to initialize the weights, the means and the precisions.", "categories": ["kmeans", "random"], "value": "kmeans", "optional": false, "advanced": false}, {"name": "random_state", "type": "integer", "description": "The number of base estimators in the ensemble.", "value": 100, "optional": false}], "inputs": [], "outputs": [{"name": "Performance", "type": "table"}]}, "definition": "import pandas as pd\nfrom sklearn.mixture import GaussianMixture\n\n\ndef rm_train(X, params):\n    print(params)\n    model = GaussianMixture(**params).fit(X)\n    bic_score = model.bic(X)\n    return model, pd.DataFrame({\"BIC\": bic_score},index=[1])\n\n\ndef rm_apply(X, model):\n    prediction = pd.DataFrame(model.score_samples(X))\n    prediction.columns = ['Anomaly_Score']\n    return prediction\n"}